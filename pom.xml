<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.acumos</groupId>
	<artifactId>blueprint-orchestrator</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>BlueprintOrchestrator</name>
	<description>Blueprint Orchestrator for Acumos</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.4.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<encoding>UTF-8</encoding>
		<!-- Stand-alone RESTFul application -->
		<start-class>org.acumos.bporchestrator.BlueprintOrchestratorApplication</start-class>
		<swagger.version>2.6.1</swagger.version>
		<!-- URL is overridden by Jenkins settings -->
		<acumos.nexus.url>Set by Jenkins</acumos.nexus.url>
		<acumos.nexus.snapshot.path>Set by Jenkins</acumos.nexus.snapshot.path>
		<acumos.nexus.release.path>Set by Jenkins</acumos.nexus.release.path>
		<!-- EELF jar is in ONAP nexus repo -->
		<onap.nexus.url>https://nexus.onap.org</onap.nexus.url>
		<onap.nexus.snapshot.path>content/repositories/snapshots/</onap.nexus.snapshot.path>
		<onap.nexus.release.path>content/repositories/releases/</onap.nexus.release.path>
		<!-- Jenkins invokes mvn with argument -Dbuild.number=${BUILD_NUMBER} -->
		<build.number>0</build.number>
		<!-- Docker daemon; overridden by Jenkins settings -->
		<docker.host.url>unix:/var/run/docker.sock</docker.host.url>
		<!-- Docker image registry; all overriden by Jenkins settings -->
		<docker.registry.url>set by Jenkins</docker.registry.url>
		<docker.registry.login>set by Jenkins</docker.registry.login>
		<docker.registry.password>set by Jenkins</docker.registry.password>
	</properties>

	<repositories>
		<repository>
			<id>acumos-snapshots</id>
			<name>acumos-repository-snapshots</name>
			<url>${acumos.nexus.url}/${acumos.nexus.snapshot.path}</url>
		</repository>
		<repository>
			<id>acumos-releases</id>
			<name>acumos-repository-releases</name>
			<url>${acumos.nexus.url}/${acumos.nexus.release.path}</url>
		</repository>
		<repository>
			<id>onap-snapshots</id>
			<name>ONAP Snapshot Repository</name>
			<url>${onap.nexus.url}/${onap.nexus.snapshot.path}</url>
		</repository>
		<repository>
			<id>onap-releases</id>
			<name>ONAP Release Repository</name>
			<url>${onap.nexus.url}/${onap.nexus.release.path}</url>
		</repository>
	</repositories>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jersey</artifactId>
		</dependency>

		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-jersey2-jaxrs</artifactId>
			<version>1.5.9</version>
		</dependency>


		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-spring-boot-starter-jaxrs</artifactId>
			<version>3.1.12</version>
		</dependency>

		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-service-description-swagger</artifactId>
			<version>3.1.7</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${swagger.version}</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${swagger.version}</version>
		</dependency>


		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.5</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>

			<!-- Require Java 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<!-- Spring sets the <version></version> -->
					<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<!-- Add the build number to the manifest. Spring-Boot uses a complex 
				packaging process that makes access to the original Manifest.MF very difficult. 
				However, Java provides access to the implementation version for a package, 
				so cram the build number into there. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<!-- Spring sets the <version>2.5</version> -->
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version}-b${build.number}</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<!-- Build a single jar with all dependencies -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- Spring sets the <version></version> -->
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Skip the deploy-jar-to-nexus step -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<!-- Spring sets the <version>2.8</version> -->
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.6.201602180812</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- https://stackoverflow.com/questions/39126226/fabric8-springboot-full-example -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.21.0</version>
				<configuration>
					<verbose>true</verbose>
					<dockerHost>${docker.host.url}</dockerHost>
					<registry>${docker.registry.url}</registry>
					<authConfig>
						<username>${docker.registry.login}</username>
						<password>${docker.registry.password}</password>
					</authConfig>
					<images>
						<image>
							<name>blueprint-orchestrator:${project.version}</name>
							<build>
								<from>frolvlad/alpine-oraclejdk8:slim</from>
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<cmd>
									<!-- CDATA prevents Eclipse formatter from breaking line -->
									<shell><![CDATA[java -Djava.security.egd=file:/dev/./urandom -jar /maven/${project.artifactId}-${project.version}.${project.packaging}]]></shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>

		</plugins>
	</build>


</project>
